var exec = require('child_process').exec;
var parseurl = require('url');
var passwords = require('../../private')

var map = false;
var DEFAULT_PATH = '/omx';

function omx(mapper) {
    map = mapper;
    return omx.express;
}

omx.express = function(req,res,next) {
  var token = (req.body && req.body.token) || (req.query && req.query.token) || req.headers['x-access-token'];
  if (req.client.authorized || (token && token == passwords.secret_token)) {
    if (req.path.indexOf(DEFAULT_PATH) === 0) {
        //replace + and decode
        path = decodeURIComponent(req.path.replace(/\+/g, ' '));
        //remove leading and trailing /
        path = path.replace(/^\/|\/$/g,'');
        //split and remove leading path
        var parts = path.split('/');
        parts.shift();
        var command = parts.shift();
        console.log('executing',command,parts);
        if (omx[command]) {
            if (command === 'start') {
                omx.start(parts.join('/')+'?'+parseurl.parse(req.url).query);
            } else {
                omx[command].apply(this,parts);
            }
            //prevent anything else from being served from this subpath
            res.end('executed '+command);
            return;
        }
    }
    next();
    } else {
      var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress || req.socket.remoteAddress || req.connection.socket.remoteAddress;
      console.log('Unauthorized access by: ', ip);
      if (token)
          console.log('token: ',token);
      return res.status(403).send({ 
        success: false, 
        message: 'Access Unauthorized.' 
      });
    }
};

omx.start = function(fn) {
    if (map) {
        map(fn,cb);
    } else {
        cb(fn);
    }

    function cb(fn) {
        console.log(fn);
        exec('omxplayer -o hdmi "'+fn+'" & ',function(error, stdout, stderr) {
            console.log(stdout);
        });
    }
};

omx.sendKey = function(key) {
    exec('dbuscontrol.sh ' + key);
};

omx.mapKey = function(command,key,then) {
    omx[command] = function() {
        omx.sendKey(key);
        if (then) {
            then();
        }
    };
};

omx.mapKey('pause','pause');
omx.mapKey('quit','stop');
omx.mapKey('kill','kill');
omx.mapKey('play','pause');
omx.mapKey('forward60','next');
omx.mapKey('back60','previous');
omx.mapKey('forward15','forward');
omx.mapKey('back15','back');
omx.mapKey('volup','volumeup');
omx.mapKey('voldown','volumedown');
omx.mapKey('update','update');
omx.mapKey('restart','restart');
omx.mapKey('subtitles','subtitles');

module.exports = omx;
